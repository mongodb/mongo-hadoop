<?xml version='1.0'?>

<!--
Copyright 2011 10gen Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="mongo-hadoop" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <property name="ivy.install.version" value="2.2.0" />
    <property name="ivy.jar.dir" value="${basedir}/lib_core" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <property name="dir.src.java.unit" value="src/unit"/>
    <property name="dir.build.java" value="build/main"/>

    <property name="junit.install.version" value="4.8.2" />
    <property name="junit.jar.dir" value="${basedir}/lib_core" />
    <property name="junit.jar.file" value="${junit.jar.dir}/junit.jar"/>

    <path id="classpath">
        <fileset dir="lib"><include name="**/*.jar"/></fileset>
        <fileset dir="lib_core"><include name="**/*.jar"/></fileset>
        <pathelement path="${dir.build.java}" />
        <pathelement path="build/examples" />
        <!-- <pathelement path="build/test" /> -->
    </path>

    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <echo message="installing ivy..."/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="download-junit" unless="skip.download">
        <mkdir dir="${junit.jar.dir}"/>
        <!-- download junit from web site so that it can be used even without any special installation -->
        <echo message="Installing junit..."/>
        <get src="http://repo1.maven.org/maven2/junit/junit/${junit.install.version}/junit-${junit.install.version}.jar" dest="${junit.jar.file}" usetimestamp="true"/>
    </target>

    <!-- =================================
    target: install-ivy
    this target is not necessary if you put ivy.jar in your ant lib directory
    if you already have ivy in your ant lib, you can simply remove this
    target and the dependency the 'go' target has on it
    ================================== -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <!-- try to load ivy here from local ivy dir, in case the user has not already dropped
        it into ant's lib dir (note that the latter copy will always take precedence).
        We will not fail as long as local lib dir exists (it may be empty) and
        ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path"><fileset dir="${ivy.jar.dir}" includes="*.jar"/></path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- Clean ivy.                                                          -->
    <!-- ******************************************************************* -->

    <target name="clean-ivy" description="--> clean the ivy installation"><delete dir="${ivy.jar.dir}"/></target>

    <!-- ******************************************************************* -->
    <!-- Clean ivy cache.                                                    -->
    <!-- ******************************************************************* -->

    <target name="clean-cache" depends="install-ivy" description="--> clean the ivy cache"><ivy:cleancache /></target>

    <!-- ******************************************************************* -->
    <!-- Init the build.                                                     -->
    <!-- ******************************************************************* -->

    <!-- TODO:  Check to  see if file(s) exist, if not download (then remove from git). -->

    <target name="init" depends="install-ivy, download-junit">
        <mkdir dir="build" />
        <mkdir dir="${dir.build.java}" />
        <mkdir dir="build/examples" />
    </target>

    <target name="resolve" depends="init" description="--> retrieve dependencies with ivy"><ivy:retrieve/></target>

    <!-- ******************************************************************* -->
    <!-- Clean local repository.                                             -->
    <!-- ******************************************************************* -->

    <target name="clean" description="--> clean up project">
        <delete dir="build"/>
        <delete file="examples/wordcount_split_test/wc-split-test.jar"/>
        <delete file="examples/wordcount_split_test/*.jar"/>
        <delete file="examples/wordcount_split_test/*.class"/>
        <delete dir="examples/wordcount_split_test/build"/>
        <delete dir="examples/ip_location/build" />
        <delete file="mongo-hadoop.jar"/>
        <delete file="examples/world_development_indicators/resources/WDI_GDF_Data.csv"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- Generate javadocs .                                                 -->
    <!-- ******************************************************************* -->

    <target name="javadoc"  depends="init">
        <mkdir dir="javadoc"/>
        <javadoc charset="UTF-8" destdir="javadoc" docencoding="UTF-8" failonerror="true"  private="false"  useexternalfile="true">
            <classpath refid="classpath"/>
            <fileset dir="."><filename name="src/main/**/*.java"/></fileset>
        </javadoc>
    </target>

    <target name="checklib"><available property="lib.exists" file="lib"/></target>

    <target name="firstresolve" unless="${lib.exists}"><antcall target="resolve" /></target>

    <!-- ******************************************************************* -->
    <!-- Run the unit tests.                                                 -->
    <!-- ******************************************************************* -->

    <target name="unit" depends="compile">
        <junit fork="yes" haltonfailure="true">
            <jvmarg value="-Duser.timezone=GMT"/>
            <jvmarg value="-Dfile.encoding=UTF-8"/>
            <classpath refid="classpath"/>

            <classpath>
                <pathelement path="${dir.build.java}"/>
            </classpath>

            <formatter type="brief" usefile="false"/>
            <batchtest todir="."><fileset dir="${dir.build.java}"><include name="**/*UnitTests.class"/></fileset></batchtest>
        </junit>
    </target>

    <target name="scalainit">
      <property environment="env"/>
      
      <!-- check for required tools -->
      <fail message="Missing SCALA_HOME variable in OS environment">
        <condition><isset property="${env.SCALA_HOME}"/></condition>
      </fail>
      <echo> scala home is ${env.SCALA_HOME} </echo>
      <property name="scala.home" location="${env.SCALA_HOME}"/>
      <property name="scala-library.jar" location="${scala.home}/lib/scala-library.jar"/>
      <property name="scala-compiler.jar" location="${scala.home}/lib/scala-compiler.jar"/>
      
      <path id="scala.classpath">
        <pathelement location="${scala-compiler.jar}"/>
        <pathelement location="${scala-library.jar}"/>
      </path>	

      <!-- load scala's ant tasks -->
      <taskdef resource="scala/tools/ant/antlib.xml" classpathref="scala.classpath"/>
    </target> 


    <!-- ******************************************************************* -->
    <!-- Create the adapter jar file.                                        -->
    <!-- ******************************************************************* -->

    <target name="jar" depends="compile">
        <jar destfile="mongo-hadoop.jar">
            <fileset dir="${dir.build.java}" includes="**/*.class" />
            <fileset dir="build/examples" includes="**/*.class" />
        </jar>
        <property name="made_jar" value="true" />
    </target>

    <!-- ******************************************************************* -->
    <!-- Compile the source.                                                 -->
    <!-- ******************************************************************* -->

    <target name="compile" depends="init, checklib, firstresolve" description="--> compile all artifacts">
        <javac
            includeantruntime="false"
            destdir="${dir.build.java}"
            optimize="off"
            deprecation="off"
            source="1.5"
            target="1.5"
            encoding="ISO-8859-1"
            memoryMaximumSize="256M"
            fork="true"
            debug="on">
            <classpath refid="classpath"/>
            <src path="src/main"/>
            <src path="${dir.src.java.unit}"/>
        </javac>

        <javac
            srcdir="examples/wordcount/src"
            includeantruntime="false"
            destdir="build/examples"
            optimize="off"
            deprecation="off"
            source="1.5"
            encoding="ISO-8859-1"
            debug="on">
            <classpath refid="classpath"/>
        </javac>

        <javac
            srcdir="examples/world_development_indicators/src"
            includeantruntime="false"
            destdir="build/examples"
            optimize="off"
            deprecation="off"
            source="1.5"
            encoding="ISO-8859-1"
            debug="on">
            <classpath refid="classpath"/>
        </javac>

        <mkdir dir="examples/wordcount_split_test/build"/>

        <javac
            srcdir="examples/wordcount_split_test/src"
            destdir="examples/wordcount_split_test/build"
            includeantruntime="false"
            optimize="off"
            deprecation="off"
            source="1.5"
            encoding="ISO-8859-1"
            debug="on">
            <classpath refid="classpath"/>
        </javac>

        <jar destfile="examples/wordcount_split_test/wc-split-test.jar"><fileset dir="examples/wordcount_split_test/build" includes="*.class" /></jar>

        <mkdir dir="examples/snmp/build"/>

        <javac srcdir="examples/snmp/src" includeantruntime="false" destdir="examples/snmp/build" debug="on" ><classpath refid="classpath"/></javac>

        <jar destfile="examples/snmp/snmp.jar"><fileset dir="examples/snmp/build" includes="*.class" /></jar>

        <mkdir dir="examples/ip_location/build" />

        <javac
            srcdir="examples/ip_location/src"
            destdir="examples/ip_location/build"
            includeantruntime="false"
            optimize="off"
            deprecation="off"
            source="1.5"
            encoding="ISO-8859-1"
            debug="on">
            <classpath refid="classpath"/>
        </javac>

        <jar destfile="examples/ip_location/ip-loc.jar"><fileset dir="examples/ip_location/build" includes="*.class" /></jar>

        <javac
            srcdir="examples/treasury_yield/src"
            destdir="build/examples"
            includeantruntime="false"
            optimize="off"
            deprecation="off"
            source="1.5"
            encoding="ISO-8859-1"
            debug="on">
            <classpath refid="classpath" />
        </javac>
    </target>

    <target name="word" depends="jar" description="--> Run the wordcount example">
        <java classname="WordCount" ><classpath refid="classpath"/></java>
    </target>

    <!--
    This assumes that you have mongodb/bin in your path and that your running your mongos on localhost:27017
    If you want to reload, you need to manually delete the data.
    -->
    <target name="world-load-data" depends="jar" description="--> Load the data for the world development indicator example">
        <unzip src="examples/world_development_indicators/resources/WDI_GDF_Data.csv.zip" dest="examples/world_development_indicators/resources" />

        <java classname="com.mongodb.hadoop.examples.WorldDevIndicatorDataLoader">
            <classpath refid="classpath"/>
        </java>

    </target>

    <!--
    This assumes that you have hadoop/bin in your path.
    -->
    <target name="world" depends="jar" description="--> Run the world development indicator example">
        <exec executable="hadoop" dir=".">
            <arg value="jar"/>
            <arg value="mongo-hadoop.jar"/>
            <arg value="com.mongodb.hadoop.examples.WorldDevIndicatorXmlConfig"/>
            <arg value="-conf"/>
           <arg value="examples/world_development_indicators/resources/world-development-indicators.xml"/>
        </exec>
    </target>

    <target name="wordcount" depends="word"/>

    <target name="wordcountXML" depends="jar" description="--> Run the wordcount example">
        <java classname="com.mongodb.hadoop.examples.WordCountXMLConfig" >
            <classpath refid="classpath"/>
            <arg line="-conf examples/wordcount/resources/mongo-wordcount.xml"/>
            <arg line="-Dlog4j.debug"/>
        </java>
    </target>

    <target name="yieldXML" depends="jar" description="--> Run the treasury yield historical example">
        <java classname="com.mongodb.hadoop.examples.TreasuryYieldXMLConfig" >
            <classpath refid="classpath"/>
            <arg line="-conf examples/treasury_yield/resources/mongo-treasury_yield.xml"/>
            <arg line="-Dlog4j.debug"/>
        </java>
    </target>


<!-- ................................................................................. -->

 <property name="jruby.home" value="${basedir}/lib/.jruby"/>

  <target name="checkgems" description="force gem/ivy download the first time ant is run">
    <available property="lib.jruby.exists" file="lib/.jruby"/>
    <!-- force ivy and gems download if .jruby directory does not exist -->
    <condition property="cuke.ivy" value="true">
      <not><isset property="lib.jruby.exists"/></not>
    </condition>
    <condition property="gems" value="true">
      <not><isset property="lib.jruby.exists"/></not>
    </condition>
 </target>

 <target name="download-jars-for-cuke" depends="install-ivy,checkgems" if="cuke.ivy" description="download jars with ivy">
    <ivy:resolve file="ivy-for-cuke.xml"/>
    <ivy:retrieve settingsRef="ivy-cuke-settings.xml"/>
  </target>


  <target name="cuke-install-gems" depends="define-cuke-paths" if="gems">
    <property name="did.gem.install" value="true" />
    <taskdef name="gem" classname="cuke4duke.ant.GemTask" classpathref="cuke.compile.classpath"/>
    <gem args="install cucumber --version 1.0.0"/><!-- Needs to be 1.0.0, not 1.0.1 until bug is fixed -->
    <gem args="install cuke4duke --version 0.4.4"/>
  </target>

 <target name="define-cuke-paths" depends="download-jars-for-cuke,scalainit">
    <path id="jruby.classpath">
      <fileset dir="lib">
        <include name="**/*.jar"/>
      </fileset>
    </path>

    <path id="cuke.compile.classpath">
      <fileset dir="lib">
        <include name="**/*.jar"/>
      </fileset>
        <path refid="scala.classpath"/>
        <pathelement location="mongo-hadoop.jar"/>
    </path>
  </target>

 <target name="cuke-compile-steps" depends="define-cuke-paths,cuke-install-gems">
      <property name="cuke-target-dir" location="target/test-classes" />
     <mkdir dir="${cuke-target-dir}" />
     <scalac srcdir="src/test/scala" destdir="${cuke-target-dir}" force="changed" scalacdebugging="on" classpathref="cuke.compile.classpath" failonerror="true" >
         <!-- reset="${made.jar}" -->
        <!-- addparams="-Yclosure-elim -optimise" -->
        <include name="**/*.scala"/>
      </scalac>
    <path id="cuke.compile.classpath.for-java">
       <path refid="cuke.compile.classpath"/>
        <pathelement location="${cuke-target-dir}"/>
    </path>

    <javac includeantruntime="false" srcdir="src/test/java" destdir="target/test-classes" classpathref="cuke.compile.classpath" encoding="UTF-8"/>
  </target>


  <target name="cucumber" depends="cuke-compile-steps " description="Run Cucumber">
    <mkdir dir="target/junit-report"/>
    <taskdef name="cucumber" classname="cuke4duke.ant.CucumberTask" classpathref="cuke.compile.classpath"/>
    <cucumber
            args="--verbose --require target/test-classes --require src/test/ruby --color --format pretty --format junit --out target/junit-report features"
            objectFactory="pico">
      <classpath refid="cuke.compile.classpath.for-java" />
    </cucumber>
  </target>



</project>
